name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from tag
        id: get-version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
      
      - name: Get commit messages since last release
        id: get-commit-messages
        run: |
          # Get the latest tag before the current one
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ env.TAG_NAME }}^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If there's no previous tag, get all commit messages
            CHANGELOG=$(git log --pretty=format:"- %s" ${{ env.TAG_NAME }})
          else
            # Get commit messages between the previous tag and the current tag
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..${{ env.TAG_NAME }})
          fi
          
          # Escape newlines for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_ENV
      
      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { TAG_NAME, VERSION, CHANGELOG } = process.env;
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: TAG_NAME,
              name: `Release ${VERSION}`,
              body: CHANGELOG || 'No changes documented',
              draft: false,
              prerelease: VERSION.includes('alpha') || VERSION.includes('beta') || VERSION.includes('rc')
            }); 